language: de
responses:
  intents:
    HassGetState:
      einzeln: |
        {{ slots.name | capitalize }} ist {{ state.state_with_unit | replace(".", ",") if state.state|float(state.state) is number else state.state_with_unit }}

      einzeln_janein: |
        {% if query.matched %}
          Ja
        {% else %}
          Nein
        {% endif %}

      irgendeins: |
        {% if query.matched %}
          {% set match = query.matched | map(attribute="name") | sort | list %}
          {% if match | length > 4 %}
            Ja, {{ match[:3] | join(", ") }} und {{ (match | length - 3) }} weitere
          {%- else -%}
            Ja,
            {% for name in match -%}
              {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}
              {{ name }}
            {%- endfor -%}
          {% endif %}
        {% else %}
          Nein
        {% endif %}

      alle: |
        {% if not query.unmatched: %}
          Ja
        {% else %}
          {% set no_match = query.unmatched | map(attribute="name") | sort | list %}
          {% if no_match | length > 4 %}
            Nein, {{ no_match[:3] | join(", ") }} und {{ (no_match | length - 3) }} weitere sind es nicht
          {%- else -%}
            Nein,
            {% for name in no_match -%}
              {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}
              {{ name }}
            {%- endfor %} {% if no_match | length == 1 %}ist{% else %}sind{% endif %} es nicht
          {% endif %}
        {% endif %}

      welches: |
        {% if not query.matched %}
          Keins
        {% else: %}
          {% set match = query.matched | map(attribute="name") | sort | list %}
          {% if match | length > 4 %}
            {{ match[:3] | join(", ") }} und {{ (match | length - 3) }} weitere
          {% else %}
            {%- for name in match -%}
              {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}
              {{ name }}
            {%- endfor -%}
          {% endif %}
        {% endif %}

      wie_viele: |
        {% set map = {
          "battery": {
            "zero_one": ["Keine", "Eine"],
            "prefix": ["Batterie ist", "Batterien sind"],
            "suffix": {"off": "normal", "on": "schwach"}
          },
          "battery_charging": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Akku wird", "Akkus werden"],
            "suffix": {"off": "nicht aufgeladen", "on": "aufgeladen"}
          },
          "carbon_monoxide": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Kohlenmonoxidsensor ist", "Kohlenmonoxidsensoren sind"],
            "suffix": {"off": "sicher", "on": "ausgelöst"}
          },
          "cold": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Gerät ist", "Geräte sind"],
            "suffix": {"off": "normal", "on": "kalt"}
          },
          "connectivity": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Gerät ist", "Geräte sind"],
            "suffix": {"off": "getrennt", "on": "verbunden"}
          },
          "gas": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Gas-Sensor ist", "Gas-Sensoren sind"],
            "suffix": {"off": "sicher", "on": "ausgelöst"}
          },
          "heat": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Gerät ist", "Geräte sind"],
            "suffix": {"off": "normal", "on": "heiß"}
          },
          "light": {
            "zero_one": ["Kein", "Ein"],
            "prefix": ["Licht ist", "Lichter sind"],
            "suffix": {"off": "aus", "on": "an"}
          }
        } %}
        {% set count = query.matched | length %}
        {% set item = map.get(slots.device_class) %}
        {% if count == 0 %}
          {% set map_invert = {"off": "on", "on": "off"} %}
          {{ item.zero_one[0] }} {{ item.prefix[0] }} {{ item.suffix.get(map_invert.get(query.unmatched[0].hass_state)) }}
        {% elif count == 1 %}
          {{ item.zero_one[1] }} {{ item.prefix[0] }} {{ item.suffix.get(query.matched[0].hass_state) }}
        {% else %}
          {{ count }} {{ item.prefix[1] }} {{ item.suffix.get(query.matched[0].hass_state) }}
        {% endif %}

      wo: |
        {% if state.state == "home" %}
          {{ slots.name | capitalize }} ist zu Hause
        {% elif state.state == "not_home" %}
          {{ slots.name | capitalize }} ist unterwegs
        {% else %}
          {{ slots.name | capitalize }} ist im Bereich {{ state.state }}
        {% endif %}

      wer: |
        {% if not query.matched %}
          Niemand
        {% else: %}
          {% set match = query.matched | map(attribute="name") | sort | list %}
          {% if match | length > 4 %}
            {{ match[:3] | join(", ") }} und {{ (match | length - 3) }} weitere
          {% else %}
            {%- for name in match -%}
              {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} und {% endif -%}
              {{ name }}
            {%- endfor -%}
          {% endif %}
        {% endif %}
