language: fr
intents:
  HassGetState:
    data:
      # https://www.home-assistant.io/integrations/binary_sensor/
      # Battery
      - sentences:
          - "[la|les] [batteri(e|es)] <dans> <name> <sontils> {bs_battery_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: battery
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "Toute[s] [les] batterie[s] <sontils> {bs_battery_states:state} [<dans> <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "(quel[le][s]|liste) [sont] [les] (appareil|batterie)[s] <sontils> {bs_battery_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "Combien [de] batterie[s] [sont] [elle[s]] {bs_battery_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: battery

      # Battery charging
      - sentences:
          - "[la batterie] [<dans>] <name> <sontils> [en] {bs_battery_charging_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: battery_charging
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "[<yatil>] (des|plusieurs) (appareil|batterie)[s] [(qui|en)] {bs_battery_charging_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "Toute[s] [les] batterie[s] <sontils> {bs_battery_charging_states:state} [<dans> <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "(quel[le][s]|liste) [sont] [les] (appareil|batterie)[s] [qui] [sont] {bs_battery_charging_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "combien (de |d')(appareil|batterie)[s] [ne] [sont] {bs_battery_charging_states:state} [<dans> <area>]"
          - "compte les (appareil|batterie)[s] [qui] [ne] [sont] {bs_battery_charging_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: battery_charging

      # Carbon monoxide
      - sentences:
          - "[<yatil>] [<dans>] <name> <sontils> [(est|été)] [au statut] {bs_carbon_monoxide_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: carbon_monoxide
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "[<dans>] (CO2|monoxyde [de carbone]) <sontils> [(est|été)] {bs_carbon_monoxide_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "[<yatil>] [(un|le) capteur de] [une alerte] (monoxyde de carbone|CO2) [(<sontils>|de)] [{bs_carbon_monoxide_states:state}] [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide
          state: "on"

      - sentences:
          - "Tou(t|s) [les] capteurs [de] (CO2|monoxyde[ de carbone]) <sontils> {bs_carbon_monoxide_states:state} [<dans> <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "(quel[le][s] |liste) [les] capteur[s] [de] (CO2|monoxyde[de carbone]) <sontils> {bs_carbon_monoxide_states:state} [<dans> <area>]"
          - "Où du (CO2|monoxyde[ de carbone]) <sontils> {bs_carbon_monoxide_states:state} "
        response: which
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "combien de capteur[s] [de] (CO2|monoxyde[de carbone]) [qui] [<sontils>] {bs_carbon_monoxide_states:state} [<dans> <area>]"
          - "compte les capteur[s] [de] (CO2|monoxyde[de carbone]) [qui] [<sontils>] {bs_carbon_monoxide_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      # # Cold
      - sentences:
          - "<name> [<sontils>] {bs_cold_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: cold
        slots:
          domain: binary_sensor
          device_class: cold

      - sentences:
          - "[<yatil>] [(certain[e][s]|des)] (appareil|chose|capteur)[s] [<sontils>] {bs_cold_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: cold
          state: "on"

      - sentences:
          - "quel[le][s] [sont] [les] (appareil|chose|capteur)[s] [qui] [<sontils>] {bs_cold_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: cold
          state: "on"

      - sentences:
          - "combien (de |d')(appareil|chose|capteur)[s] [qui] [<sontils>] {bs_cold_states:state} [<dans> <area>]"
          - "compte le (appareil|chose|capteur)[s] [qui] [<sontils>] {bs_cold_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: cold
          state: "on"

      # # Connectivity
      - sentences:
          - "<name> [<sontils>] {bs_connectivity_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: connectivity
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "[<yatil>] [(certain[e][s]|des)] (appareil|chose|capteur)[s] [<sontils>] {bs_connectivity_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "Tou(t|s)[e][s] les (appareil|capteur|machine)[s] [<sontils>] {bs_connectivity_states:state} [in <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "quel[le][s] [sont] [les] (appareil|capteurs|machines) [qui] [<sontils>] {bs_connectivity_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "combien (de |d')(appareil|chose|capteur)[s] [<sontils>] {bs_connectivity_states:state} [<dans> <area>]"
          - "compte les (appareil|chose|capteur)[s] [<sontils>] {bs_connectivity_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: connectivity

      # # Door
      - sentences:
          - "<name> <sontils> {bs_door_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: door
        slots:
          domain: binary_sensor
          device_class: door

      # # Garage door
      - sentences:
          - "<name> [<de>] [garage] <sontils> {bs_garage_door_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: garage_door
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "[<tous>] les portes [<de>] garage <sontils> {bs_garage_door_states:state} [<dans> <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "[<yatil>] [(certain[e][s]|des)] porte[s] <de> garage [qui] [<sontils>] {bs_garage_door_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "quel[le][s] [sont] [les] porte[s] <de> garage [qui] [<sontils>] {bs_garage_door_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "combien de porte[s] <de> garage [<sontils>] {bs_garage_door_states:state} [<dans> <area>]"
          - "compte les porte[s] <de> garage [qui] [<sontils>] {bs_garage_door_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: garage_door

      # # Gas
      - sentences:
          - "[<yatil>] [<dans>] <name> <sontils> {bs_gas_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: gas
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "[<dans>] gaz <sontils> [(est|été)] {bs_gas_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "[<yatil>] [(un|le) capteur de] [une alerte] [(de|au)] gaz [(<sontils>|de)] [{bs_gas_states:state}] [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: gas
          state: "on"

      - sentences:
          - "[<tous>] [les] capteurs [de] gaz <sontils> {bs_gas_states:state} [<dans> <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "(quel[le][s]|liste) [les] capteur[s] [de] gaz <sontils> {bs_gas_states:state} [<dans> <area>]"
          - "Où du gaz <sontils> {bs_gas_states:state} "
        response: which
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "combien de capteur[s] [de] gaz [qui] [<sontils>] {bs_gas_states:state} [<dans> <area>]"
          - "compte les capteur[s] [de] gaz [qui] [<sontils>] {bs_gas_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: gas

      # # Heat
      - sentences:
          - "<name> <sontils> [une température] {bs_heat_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: heat
        slots:
          domain: binary_sensor
          device_class: heat

      - sentences:
          - "[<yatil>] [(certain[e][s]|des)] (appareil|chose|capteur)[s] [<sontils>] {bs_heat_states:state}[( |-il[s]|-elle[s])] [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: heat
          state: "on"

      - sentences:
          - "[<tous>] [les] (appareil|chose|capteur)[s] <sontils> une température {bs_heat_states:state} [<dans> <area>]"
        response: all
        slots:
          domain: binary_sensor
          device_class: heat

      - sentences:
          - "(quel[le][s]|liste) [sont] [les] (appareil|chose|capteur)[s] [qui] [<sontils>] {bs_heat_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: heat
          state: "on"

      - sentences:
          - "combien (de |d')(appareil|chose|capteur)[s] [qui] [<sontils>] {bs_heat_states:state} [<dans> <area>]"
          - "compte les (appareil|chose|capteur)[s] [de] [qui] [<sontils>] {bs_heat_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: heat
          state: "on"

      # # Light
      - sentences:
          - "<name> <sontils> {bs_light_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: light
        slots:
          domain: binary_sensor
          device_class: light

      - sentences:
          - "[<yatil>] (de la|des) lumière[s] [<sontils>] {bs_light_states:state} [<dans> <area>]"
        response: any
        slots:
          domain: binary_sensor
          device_class: light

      - sentences:
          - "<tous> les lumières <sontils> détecté[e][s]"
        response: all
        slots:
          domain: binary_sensor
          device_class: light
          state: "on"

      - sentences:
          - "(quel[le][s]|liste) [sont] [les] lumières [qui] [<sontils>] {bs_light_states:state} [<dans> <area>]"
        response: which
        slots:
          domain: binary_sensor
          device_class: light

      - sentences:
          - "combien de lumières [<sontils>] {bs_light_states:state} [<dans> <area>]"
          - "compte les lumières [qui] [sont] {bs_light_states:state} [<dans> <area>]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: light

      # # Lock
      - sentences:
          - "<name> <sontils> {bs_lock_states:state} [<dans> <area>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: lock
        slots:
          domain: binary_sensor
          device_class: lock

      # # Moisture
      # - sentences:
      #     - "(is|are) <name> {bs_moisture_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: moisture
      #   slots:
      #     domain: binary_sensor
      #     device_class: moisture

      # - sentences:
      #     - "(is|are) any water sensor[s] {bs_moisture_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: moisture

      # - sentences:
      #     - "is [there] a[ny] (flood|leak) [detected] [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: moisture
      #     state: "on"

      # - sentences:
      #     - "are all [the] water sensor[s] {bs_moisture_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: moisture

      # - sentences:
      #     - "(which|what) water sensor[s] (is|are) {bs_moisture_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: moisture

      # - sentences:
      #     - "how many water sensor[s] (is|are) {bs_moisture_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: moisture

      # # Motion
      # - sentences:
      #     - "(is|are) <name> {bs_motion_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: motion
      #   slots:
      #     domain: binary_sensor
      #     device_class: motion

      # - sentences:
      #     - "(is|are) any motion sensor[s] {bs_motion_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: motion

      # - sentences:
      #     - "is [there] any motion detected [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: motion
      #     state: "on"

      # - sentences:
      #     - "are all [the] motion sensor[s] {bs_motion_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: motion

      # - sentences:
      #     - "(which|what) motion sensor[s] (is|are) {bs_motion_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: motion

      # - sentences:
      #     - "how many motion sensor[s] (is|are) {bs_motion_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: motion

      # # Occupancy
      # - sentences:
      #     - "(is|are) <name> {bs_occupancy_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: occupancy
      #   slots:
      #     domain: binary_sensor
      #     device_class: occupancy

      # - sentences:
      #     - "(is|are) any occupancy sensor[s] {bs_occupancy_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: occupancy

      # - sentences:
      #     - "is [there] any occupancy detected [in <area>]"
      #     - "is <area> occupied"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: occupancy
      #     state: "on"

      # - sentences:
      #     - "are all [the] occupancy sensor[s] {bs_occupancy_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: occupancy

      # - sentences:
      #     - "(which|what) occupancy sensor[s] (is|are) {bs_occupancy_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: occupancy

      # - sentences:
      #     - "how many occupancy sensor[s] (is|are) {bs_occupancy_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: occupancy

      # # Opening
      # - sentences:
      #     - "(is|are) <name> {bs_opening_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: opening
      #   slots:
      #     domain: binary_sensor
      #     device_class: opening

      # - sentences:
      #     - "(is|are) any opening[s] {bs_opening_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: opening

      # - sentences:
      #     - "are all [the] opening[s] {bs_opening_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: opening

      # - sentences:
      #     - "(which|what) opening[s] (is|are) {bs_opening_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: opening

      # - sentences:
      #     - "how many opening[s] (is|are) {bs_opening_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: opening

      # # Plug
      # - sentences:
      #     - "(is|are) <name> {bs_plug_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: plug
      #   slots:
      #     domain: binary_sensor
      #     device_class: plug

      # - sentences:
      #     - "(is|are) any (thing[s]|device[s]) {bs_plug_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: plug

      # - sentences:
      #     - "are all [the] (thing[s]|device[s]) {bs_plug_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: plug

      # - sentences:
      #     - "(which|what) (thing[s]|device[s]) (is|are) {bs_plug_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: plug

      # - sentences:
      #     - "how many (thing[s]|device[s]) (is|are) {bs_plug_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: plug

      # # Power
      # - sentences:
      #     - "(is|are) <name> {bs_power_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: power
      #   slots:
      #     domain: binary_sensor
      #     device_class: power

      # - sentences:
      #     - "(is|are) any (thing[s]|device[s]) {bs_power_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: power

      # - sentences:
      #     - "are all [the] (thing[s]|device[s]) {bs_power_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: power

      # - sentences:
      #     - "(which|what) (thing[s]|device[s]) (is|are) {bs_power_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: power

      # - sentences:
      #     - "how many (thing[s]|device[s]) (is|are) {bs_power_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: power

      # # Presence
      # - sentences:
      #     - "(is|are) <name> {bs_presence_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: presence
      #   slots:
      #     domain: binary_sensor
      #     device_class: presence

      # - sentences:
      #     - "(is|are) any (thing[s]|device[s]) {bs_presence_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: presence

      # - sentences:
      #     - "are all [the] (thing[s]|device[s]) {bs_presence_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: presence

      # - sentences:
      #     - "(which|what) (thing[s]|device[s]) (is|are) {bs_presence_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: presence

      # - sentences:
      #     - "how many (thing[s]|device[s]) (is|are) {bs_presence_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: presence

      # # Problem
      # - sentences:
      #     - "are there [any] problems with <name> [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: problem
      #   slots:
      #     domain: binary_sensor
      #     device_class: problem
      #     state: "on"

      # # Running
      # - sentences:
      #     - "(is|are) <name> {bs_running_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: running
      #   slots:
      #     domain: binary_sensor
      #     device_class: running

      # - sentences:
      #     - "(is|are) any (thing[s]|device[s]) {bs_running_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: running

      # - sentences:
      #     - "are all [the] (thing[s]|device[s]) {bs_running_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: running

      # - sentences:
      #     - "(which|what) (thing[s]|device[s]) (is|are) {bs_running_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: running

      # - sentences:
      #     - "how many (thing[s]|device[s]) (is|are) {bs_running_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: running

      # # Safety
      # - sentences:
      #     - "(is|are) <name> {bs_safety_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: safety
      #   slots:
      #     domain: binary_sensor
      #     device_class: safety

      # # Smoke
      # - sentences:
      #     - "(is|are) <name> {bs_smoke_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: smoke
      #   slots:
      #     domain: binary_sensor
      #     device_class: smoke

      # - sentences:
      #     - "(is|are) any smoke sensor[s] {bs_smoke_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: smoke

      # - sentences:
      #     - "is [there] [any] smoke in <area>"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: smoke
      #     state: "on"

      # - sentences:
      #     - "are all [the] smoke sensor[s] {bs_smoke_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: smoke

      # - sentences:
      #     - "(which|what) smoke sensor[s] (is|are) {bs_smoke_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: smoke

      # - sentences:
      #     - "how many smoke sensor[s] (is|are) {bs_smoke_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: smoke

      # # Sound
      # - sentences:
      #     - "(is|are) <name> {bs_sound_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: sound
      #   slots:
      #     domain: binary_sensor
      #     device_class: sound

      # - sentences:
      #     - "(is|are) any (noise|sound) sensor[s] {bs_sound_states:state} [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: sound

      # - sentences:
      #     - "is [there] [any] noise in <area>"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: sound
      #     state: "on"

      # - sentences:
      #     - "are all [the] (noise|sound) sensor[s] {bs_sound_states:state} [in <area>]"
      #   response: all
      #   slots:
      #     domain: binary_sensor
      #     device_class: sound

      # - sentences:
      #     - "(which|what) (noise|sound) sensor[s] (is|are) {bs_sound_states:state} [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: sound

      # - sentences:
      #     - "how many (noise|sound) sensor[s] (is|are) {bs_sound_states:state} [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: sound

      # # Tamper
      # - sentences:
      #     - "(is|are) <name> {bs_tamper_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: tamper
      #   slots:
      #     domain: binary_sensor
      #     device_class: tamper

      # # Update
      # - sentences:
      #     - "(is|are) <name> {bs_update_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: update
      #   slots:
      #     domain: binary_sensor
      #     device_class: update

      # - sentences:
      #     - "are [there] any [(firmware|software)] updates [available] [in <area>]"
      #   response: any
      #   slots:
      #     domain: binary_sensor
      #     device_class: update
      #     state: "on"

      # - sentences:
      #     - "(which|what) [(firmware|software)] updates are (there|available) [in <area>]"
      #   response: which
      #   slots:
      #     domain: binary_sensor
      #     device_class: update
      #     state: "on"

      # - sentences:
      #     - "how many [(firmware|software)] updates are (there|available) [in <area>]"
      #   response: how_many
      #   slots:
      #     domain: binary_sensor
      #     device_class: update
      #     state: "on"

      # # Vibration
      # - sentences:
      #     - "(is|are) <name> {bs_vibration_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: vibration
      #   slots:
      #     domain: binary_sensor
      #     device_class: vibration

      # - sentences:
      #     - "is anything vibrating [in <area>]"
      #   response: any
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: vibration
      #   slots:
      #     domain: binary_sensor
      #     device_class: vibration
      #     state: "on"

      # # Window
      # - sentences:
      #     - "(is|are) <name> {bs_window_states:state} [in <area>]"
      #   response: one_yesno
      #   requires_context:
      #     domain: binary_sensor
      #     device_class: window
      #   slots:
      #     domain: binary_sensor
      #     device_class: window
