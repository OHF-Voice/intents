language: fr
intents:
  HassGetState:
    data:
      # # Door
      - sentences:
          - "[<le>]{name} <estil> {bs_door_states:state} [<dans> [<le>]{area}]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: door
        slots:
          domain: binary_sensor
          device_class: door

      # # Garage door
      - sentences:
          - "[<le>]{name} [<de>] [garage] [<dans> [<le>]{area}] <estil> {bs_garage_door_states:state}"
          - "[<le>]{name} [<de>] [garage] <estil> {bs_garage_door_states:state} [<dans> [<le>]{area}]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: garage_door
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "[<tous>] les portes [<de>] garage <estil> {bs_garage_door_states:state} [<dans> [<le>]{area}]"
        response: all
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "[(certain[e][s]|des)] porte[s] <de> garage [<estil>] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
          - "[<yatil>] [(certain[e][s]|des)] porte[s] <de> garage [qui sont] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
        response: any
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "<quel> [sont] [les] porte[s] <de> garage [<estil>] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
          - "<quel> [sont] [les] porte[s] <de> garage [qui sont] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
          - "liste [les] porte[s] <de> garage [qui sont] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
        response: which
        slots:
          domain: binary_sensor
          device_class: garage_door

      - sentences:
          - "combien de porte[s] <de> garage [<estil>] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
          - "compte (les |le nombre de) porte[s] <de> garage [qui] [<estil>] {bs_garage_door_states:state} [<dans> [<le>]{area}]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: garage_door

      # # Occupancy
      - sentences:
          - "[le] [(capteur|détecteur)][s] [de] [<le>]{name} <estil> {bs_occupancy_states:state} [<dans> [<le>]{area}]"
          - "[le] [(capteur|détecteur)][s] [de] [<le>]{name} [<dans> [<le>]{area}] <estil> {bs_occupancy_states:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: occupancy
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "[<yatil>] (des|un|du) [(capteur|détecteur)[s] de présence] {bs_occupancy_states:state} [<dans> [<le>]{area}]"
          - "[<le>]{area} <estil> {bs_occupancy_states:state}"
        response: any
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "[<yatil>] (quelqu'un|(une|des) personne[s]) [de] [détecté[e]s] [<dans> [<le>]{area}]"
          - "(quelqu'un|(une|des) personne[s]) [<estil>] [détecté[e]s] [<dans> [<le>]{area}]"
        response: any
        slots:
          domain: binary_sensor
          device_class: occupancy
          state: "on"

      - sentences:
          - "<tous> les (capteur|détecteur)[s] de présence <estil> {bs_occupancy_states:state} [<dans> [<le>]{area}]"
        response: all
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "<quel> (capteur|détecteur)[s] de présence [<estil>] {bs_occupancy_states:state} [<dans> [<le>]{area}]"
          - "<quel> sont les (capteur|détecteur)[s] de présence [qui] [sont] {bs_occupancy_states:state} [<dans> [<le>]{area}]"
          - "liste les (capteur|détecteur)[s] de présence [qui] [<estil>] {bs_occupancy_states:state} [<dans> [<le>]{area}]"
        response: which
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "combien de (capteur|détecteur)[s] de présence [<estil>] {bs_occupancy_states:state} [<dans> [<le>]{area}]"
          - "compte (les |le nombre de) (capteur|détecteur)[s] de présence [qui] [sont] {bs_occupancy_states:state} [<dans> [<le>]{area}]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: occupancy

      # # Window
      - sentences:
          - "[<le>]{name} <estil> {bs_window_states:state} [in [<le>]{area}]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: window
        slots:
          domain: binary_sensor
          device_class: window

      - sentences:
          - "[<yatil>] (des|un[e]) <fenetre> [qui sont] {bs_window_states:state} [<dans> [<le>]{area}]"
          - "(des|un[e]) <fenetre> [<estil>] {bs_window_states:state} [<dans> [<le>]{area}]"
        response: any
        slots:
          domain: binary_sensor
          device_class: window

      - sentences:
          - "<tous> les <fenetre> <estil> {bs_window_states:state} [<dans> [<le>]{area}]"
          - "<tous> les <fenetre> [<dans> [<le>]{area}] <estil> {bs_window_states:state}"
        response: all
        slots:
          domain: binary_sensor
          device_class: window

      - sentences:
          - "<quel> [sont] [les] <fenetre> [qui sont] {bs_window_states:state} [<dans> [<le>]{area}]"
          - "<quel> <fenetre> [<estil>] {bs_window_states:state} [<dans> [<le>]{area}]"
          - "liste les <fenetre> [qui sont] {bs_window_states:state} [<dans> [<le>]{area}]"
        response: which
        slots:
          domain: binary_sensor
          device_class: window

      - sentences:
          - "combien de <fenetre> [<estil>] {bs_window_states:state} [<dans> [<le>]{area}]"
          - "compte les <fenetre> [qui] [sont] {bs_window_states:state} [<dans> [<le>]{area}]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: window
